#!/bin/bash

echo "running deployment script..."

function setReleaseVersion() {
    echo "set $1 to release version"
    if ! mvn -f $1/pom.xml -q build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.minorVersion} versions:commit; then
        echo "set release version failed"
        exit 1
    fi
}

function setNextDevVersion() {
    echo "set $1 to next development version"
    if ! mvn -f $1/pom.xml -q build-helper:parse-version versions:set -DnewVersion=\${parsedVersion.majorVersion}.\${parsedVersion.nextMinorVersion}-SNAPSHOT versions:commit; then
        echo "set next development version failed"
        exit 1
    fi
}

function deploy() {
    echo "deploying version $PROJECT_VERSION of $1 to maven centrale..."
    if ! mvn -f $1/pom.xml deploy --settings $GPG_DIR/settings.xml -Prelease -DskipTests=true -B; then
        echo "maven deploy failed"
        exit 1
    fi
}

hasChange() {
    local check_path=$1'/'

    echo "Checking changes since ${TRAVIS_COMMIT_RANGE} against ${check_path}"
    GITDIFF=$(git diff --name-only ${TRAVIS_COMMIT_RANGE} | grep ${check_path} | tr -d '[:space:]')
    if [ "$GITDIFF" == "" ]; then
        echo "No code changes, skipped"
        return 0
    fi
    echo "Code changes"
    return 1
}

# Pull requests and commits to other branches shouldn't try to deploy, just build to verify
if [ "$TRAVIS_PULL_REQUEST" != "false" -o "$TRAVIS_BRANCH" != "master" ]; then
    echo "Skipping deploy; just doing a build."
    exit 0
fi

MAKE_RELEASE_PLUGIN='false'
hasChange livingdoc-maven-plugin
changesDetected=$?

if [ "$TRAVIS_BRANCH" = 'master' ] && [ "$TRAVIS_PULL_REQUEST" = 'false' ] && [ $changesDetected != 0 ]; then
    MAKE_RELEASE_PLUGIN='true'
    echo "prepare livingdoc-maven-plugin for releasing"
    setReleaseVersion livingdoc-maven-plugin
fi

MAKE_RELEASE_ANNOTATION='false'
hasChange livingdoc-annotations
changesDetected=$?

if [ "$TRAVIS_BRANCH" = 'master' ] && [ "$TRAVIS_PULL_REQUEST" = 'false' ] && [ $changesDetected != 0 ]; then
    MAKE_RELEASE_ANNOTATION='true'
    echo "prepare livingdoc-annotations for releasing"
    setReleaseVersion livingdoc-annotations
fi

if [ "$MAKE_RELEASE_PLUGIN" = 'true' || "$MAKE_RELEASE_ANNOTATION" = 'true' ]; then
    # reconnect master to origin
    git checkout master

    # upgrade poms to final release version
    setReleaseVersion .
else
    echo "keep snapshot version in pom.xml"
fi

echo "reading project version..."
PROJECT_VERSION=$(mvn -q exec:exec -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive)

# deploy release or snapshot, depend on previous tests
deploy livingdoc-annotations
deploy livingdoc-maven-plugin

if [ "$MAKE_RELEASE_PLUGIN" = 'true' || "$MAKE_RELEASE_ANNOTATION" = 'true' ]; then
    git config user.name "Travis CI"
    git config user.email "travis-ci@ifocusit.ch"
    git config --global push.followTags true # push commit and tag

    GIT_TAG="release/java/v$PROJECT_VERSION"
    echo "create git tag $GIT_TAG"
    git tag "$GIT_TAG" -a -m "Generated tag from TravisCI for build $TRAVIS_BUILD_NUMBER"

    echo "preparing next version..."
    setNextDevVersion .

    if [ "$MAKE_RELEASE_PLUGIN" = 'true' ]; then
        setNextDevVersion livingdoc-maven-plugin
    fi
    if [ "$MAKE_RELEASE_ANNOTATION" = 'true' ]; then
        setNextDevVersion livingdoc-annotations
    fi

    NEXT_VERSION=$(mvn -q exec:exec -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive)
    echo "next development version will be $NEXT_VERSION"

    # Commit the "changes", i.e. the new version.
    git add -A .
    git commit -m "set next development version to $NEXT_VERSION"

    echo "pushing new development version..."
    git push "https://$GITHUB_TOKEN@github.com/$TRAVIS_REPO_SLUG.git" --follow-tags

    echo "release $PROJECT_VERSION done, tag $GIT_TAG pushed, next development version $NEXT_VERSION setted"
fi

